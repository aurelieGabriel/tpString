//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================



// ===========================================================================
//                                 Project Files
// ===========================================================================
#include "String.h"




//############################################################################
//                                                                           #
//                           Class String                                    #
//                                                                           #
//############################################################################

// ===========================================================================
//                         Definition of static attributes
// ===========================================================================
const size_t String::MAX_SIZE = 50;

// ===========================================================================
//                                  Constructors
// ===========================================================================
String::String(void)
{
  capacity_ = 20;
  length_ = 4;
  data = new char[capacity_];
  data[0]= 't';
  data[1]='e';
  data[2]='s';
  data[3]='t';
}

String::String(const String &s)
{
  
  data = new char[s.capacity_];
  int i;
  for(i=0; i<s.length_; i++)
    {
      data[i]= s.data[i];
    }
  length_ = s.length_;
  capacity_ = s.capacity_;
}

String::String(const char * s)
{
  capacity_ = 20;
  int i=0,l=0;
  while(s[i] != NULL)
    {
      l++;
      i++;
    }
  data = new char[capacity_];
  for(i=0;i<l;i++)
    {
      data[i] = s[i];
    }
  length_ = l;
}

// ===========================================================================
//                                  Destructor
// ===========================================================================
String::~String(void)
{
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================
size_t String::length() const
{
  return length_;
}

bool String::Empty(void)                     // test if the string is empty
{
	if(length_==0)
	{
		return true;
	}
	else
	{
		return false;
	}
}


size_t String::capacity(void)             // return the string capacity
{
	return capacity_;
}

const size_t String::max_size(void)
{
  return MAX_SIZE;
}

// ===========================================================================
//                                Protected Methods
// ===========================================================================

// ===========================================================================
//                               Non inline accessors
// ===========================================================================
